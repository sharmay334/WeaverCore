node {
   stage 'Checkout'

      checkout scm

   stage 'Build'
         sh "export" 
         def mvnHome = tool 'M3' // these named tool has to be added or installed automatically usin global tool config
         def buildStatus=-1
         def  commitId
       if("${env.BRANCH_NAME}".contains("Release")) {


            buildStatus = sh returnStatus: true, script: "${mvnHome}/bin/mvn clean install -DVERSION=${env.BUILD_NUMBER}"

       } else {

           buildStatus=  sh  returnStatus: true, script:"${mvnHome}/bin/mvn clean install -DVERSION=SNAPSHOT"

       }
sh "git rev-parse --short HEAD > .git/commit-id"                        
commitId = readFile('.git/commit-id').trim()
      
     echo commitId
         echo  "BuildStatusPrinting"
         echo  "${buildStatus}"
          if (buildStatus !=0){

httpRequest customHeaders: [[name: 'PRIVATE-TOKEN', value: "${GIT_TOKEN}"]], httpMode: 'POST', url: "${GIT_URL}${RMS_GIT_ID}/statuses/${commitId}?state=failed"

       error 'Build Failed'
           }
     
          if(buildStatus==0){
httpRequest customHeaders: [[name: 'PRIVATE-TOKEN', value: "${GIT_TOKEN}"]], httpMode: 'POST', url: "${GIT_URL}${RMS_GIT_ID}/statuses/${commitId}?state=success"
          }


        junit allowEmptyResults: true, testResults: 'target/surefire-reports/*.xml'
       


       publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'target/site/jacoco', reportFiles: 'index.html', reportName: 'Code Coverage'])


   if("${env.BRANCH_NAME}".contains("Release")) {

   stage 'Create & Publish Package'

    sh "${mvnHome}/bin/mvn assembly:single -DVERSION=${env.BUILD_NUMBER}"

    def groupId = getPomValue(readFile("pom.xml"), "groupId")
    def artifactId = getPomValue(readFile("pom.xml"), "artifactId")
    def version= getPomValue(readFile("pom.xml"), "version")
    def releaseVersion = version.substring(0, version.lastIndexOf("_") + 1) + "${env.BUILD_NUMBER}"

    nexusArtifactUploader  artifactId: "${artifactId}",
                           credentialsId: 'Nexus',
                           file: "target/${artifactId}-${releaseVersion}-dist.zip",
                           groupId: "${groupId}",
                           nexusUrl: '192.168.126.99:8087',
                           nexusVersion: 'nexus3',
                           protocol: 'http',
                           repository: 'RMS',
                           type: 'zip',
                           version: "${releaseVersion}"
                           
                           stage 'QA-Deploy'

                            echo 'Deploying...'
                           
                        sshagent (credentials: ['JenkinsSSH']) {

            sh " ssh -o StrictHostKeyChecking=no -l ${ZIM_QA_USER} ${ZIM_QA} python /home/lms/Deploy/deploy.py ${NEXUS_BASE_URL} RMS ${groupId} ${artifactId} ${releaseVersion} ${artifactId}-${releaseVersion}.zip &"

                                    }
                        sleep(60)
            long start_time = System.currentTimeMillis();
            long wait_time = 120000;
            long end_time = start_time + wait_time;
            def status=0
            while (System.currentTimeMillis() < end_time && status != 200 )
            {
            try {
            def response = httpRequest  timeout: 30, url: "http://${ZIM_QA}:${ZIM_QA_JBOSS4_PORT}/LMSLinuxNew", validResponseCodes: '200'
            status = response.status
            }
            catch(Exception e  ){
            sleep(5)
            }
            
            }
            if (status !=200)
            error 'Application Not Running'
            
    }
}

@NonCPS
def getPomValue(text, element) {
  def matcher = text =~ '<' + element + '>(.+)</' + element + '>'
  matcher ? matcher[0][1] : null
}
