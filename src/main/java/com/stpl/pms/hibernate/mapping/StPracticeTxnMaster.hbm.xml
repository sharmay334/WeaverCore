<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
	<!-- 
    Mapping file autogenerated by MyEclipse Persistence Tools
-->
<hibernate-mapping>
	<class name="com.stpl.pms.hibernate.mapping.StPracticeTxnMaster"
		table="st_practice_txn_master">
		<id name="transactionId" type="java.lang.Long">
			<column name="transaction_id" />
			<generator class="native" />
		</id>
		<property name="transactionWith" type="java.lang.String">
			<column name="transaction_with" length="9" not-null="true">
				<comment>with whom the transaction is actually taking place</comment>
			</column>
		</property>
		<property name="transactionType" type="java.lang.String">
			<column name="transaction_type" length="32" not-null="true">
				<comment>what is the exact nature of the transaction</comment>
			</column>
		</property>
		<property name="serviceId" type="java.lang.Short">
			<column name="service_id" not-null="true">
				<comment>the service type for which the transaction is being done</comment>
			</column>
		</property>
		<property name="partyId" type="java.lang.Long">
			<column name="party_id" not-null="true">
				<comment>id with whom transaction actually takes place like
					player,affiliate etc.</comment>
			</column>
		</property>
		<property name="domainId" type="java.lang.Short">
			<column name="domain_id" not-null="true" />
		</property>
		<property name="aliasId" type="java.lang.Short">
			<column name="alias_id" not-null="true" />
		</property>
		<property name="transactionDate" type="java.sql.Timestamp">
			<column name="transaction_date" length="19" not-null="true" />
		</property>
	</class>
	<sql-query name="getPlayerTransactionReports">
		{call
		playerTransactionReports(:domainId,:aliasId, :fromDate, :toDate,:reportCurrency) }
	</sql-query>
	<sql-query name="getDepositDetailPG">
		{call getDepositDetailPG(:domainId,:aliasId,
		:fromDate, :toDate,:reportCurrency) }
	</sql-query>
	<sql-query name="getWithdrawalDetailPG">
		{call getWithdrawalDetailPG(:domainId,:aliasId,
		:fromDate, :toDate,:reportCurrency) }
	</sql-query>
	<sql-query name="getDepositDetailPT">
		{call getDepositDetailPT(:domainId,:aliasId,
		:fromDate, :toDate,:reportCurrency) }
	</sql-query>
	<sql-query name="getWithdrawalDetailPT">
		{call getWithdrawalDetailPT(:domainId,:aliasId,
		:fromDate, :toDate,:reportCurrency) }
	</sql-query>
	<sql-query name="getDepositDetailMix" callable="true">
		{call getDepositDetailMix(:domainId,
		:fromDate, :toDate) }
	</sql-query>
	<sql-query name="getWithdrawalDetailMix" callable="true">
		{call getWithdrawalDetailMix(:domainId,
		:fromDate, :toDate) }
	</sql-query>
	<sql-query name="getPlayerDepositReport">
		{call getPlayerDepositReport(:domainId,
		:fromDate, :toDate, :reportCurrency) }
	</sql-query>
	<sql-query name="getPlrDepReportWithStatus">
		{call
		getPlrDepReportWithStatus(:domainId,:aliasId, :fromDate, :toDate, :reportCurrency,:uName,:requestId,:doneByBo,:initiated,:cancelByBo,:done,:failed,:startIndex ,:recordTofetch) }
	</sql-query>
	<sql-query name="getPlrWithDrawalReportWithStatus">
		{call
		getPlrWithDrawalReportWithStatus(:domainId,:aliasId, :fromDate, :toDate, :reportCurrency,:uName,:cancelByPlayer,:initiated,:cancelByBo,:done,:processed,:pending,:startIndex ,:recordTofetch) }
	</sql-query>
	<sql-query name="getWithDrawalTxnReport">
		{call getWithDrawalTxnReport(:domainId,
		:fromDate, :toDate, :reportCurrency) }
	</sql-query>
	<sql-query name="getWithDrawalProcessedTxnReport">
		{call
		getWithDrawalProcessedTxnReport(:domainId, :aliasId,:fromDate, :toDate, :reportCurrency) }
	</sql-query>
	<sql-query name="getBonusDetailReport">
		{call getBonusDetailReport(:domainId,:aliasId,
		:fromDate, :toDate, :procNamegetBonusDetailReport, :reportCurrency,:startIndex ,:recordTofetch) }
	</sql-query>
	<sql-query name="getBonusAnalysisReport">
		{call getBonusAnalysisReport(:domainId,:aliasId,
		:fromDate, :toDate, :procNamegetBonusAnalysisReport, :reportCurrency,:startIndex ,:recordTofetch) }
	</sql-query>
	<sql-query name="getBonusPlrDetailReport">
		{call getBonusPlrDetailReport(:domainId,:aliasId, :bonusCode,
		:fromDate, :toDate, :reportCurrency,:startIndex ,:recordTofetch) }
	</sql-query>
	
	<sql-query name="StCmsCampTracking">
		{call StCmsCampTracking(:domainId,:aliasId, :fromDate,
		:toDate, :deviceType, :campType,:startIndex ,:recordTofetch) }
	</sql-query>
	<sql-query name="StCmsReferFriendTracking">
		{call StCmsReferFriendTracking(:domainId,:aliasId,
		:fromDate, :toDate, :deviceType, :campType) }
	</sql-query>
	<sql-query name="stCmsCampPlayerRegReport">
		{call
		stCmsCampPlayerRegReport(:domainId,:campId,:subCampId, :fromDate, :toDate,
		:campType, :emailVerified,:device, :paramVal,:startIndex ,:recordTofetch) }
	</sql-query>
	<sql-query name="stCmsCampPlayerDepReport">
		{call
		stCmsCampPlayerDepReport(:domainId,:campId,:subCampId, :fromDate, :toDate,
		:campType,:device, :paramVal,:startIndex ,:recordTofetch) }
	</sql-query>
	<sql-query name="stCmsReferFriendPlrRegReport" callable="true">
		{call
		stCmsReferFriendPlrRegReport(:domainId,:aliasId,:campId,:subCampId, :fromDate, :toDate,
		:campType,:device,:startIndex ,:recordTofetch) }
	</sql-query>
	<sql-query name="stCmsReferFriendPlrDepReport" callable="true">
		{call
		stCmsReferFriendPlrDepReport(:domainId,:aliasId,:campId,:subCampId, :fromDate, :toDate,
		:campType,:device,:startIndex ,:recordTofetch) }
	</sql-query>
	<sql-query name="StCmsReferFriendInvitedTracking" callable="true">
		{call
		StCmsReferFriendInvitedTracking(:domainId,:aliasId,:campId,:subCampId, :fromDate, :toDate,
		:campType,:device,:startIndex ,:recordTofetch) }
	</sql-query>
	<sql-query name="StCmsReferFriendVisitedTracking" callable="true">
		{call
		StCmsReferFriendVisitedTracking(:domainId,:aliasId,:campId,:subCampId, :fromDate, :toDate,
		:campType,:device,:startIndex ,:recordTofetch) }
	</sql-query>
	<sql-query name="getAppsFlyerAndroidReportData">
		{call
		getAppsFlyerAndroidReportData(:domainId, :fromDate, :toDate, :reportType, :deviceType,:startIndex ,:recordTofetch) }
	</sql-query>
	<sql-query name="getAppsFlyerIosReportData">
		{call
		getAppsFlyerIosReportData(:domainId, :fromDate, :toDate, :reportType, :deviceType,:startIndex ,:recordTofetch) }
	</sql-query>
	<sql-query name="MisRegsitrationReport" >
		{call MisRegsitrationReport(:domainId,:aliasId,
		:fromDate, :toDate, :state, :city, :free, :deposit, :emailIdVerify,
		:mobileNoVerify, :birthDateVerify, :fromDob, :toDob , :playerStatusReg,
		:direct , :campaign, :refer, :zapak, :ola, :pc, :mobile ,:startIndex ,:recordTofetch, :profileStatusReg) }
	</sql-query>

	<sql-query name="MisDepositAndWithdrawal">
		{call MisDepositAndWithdrawal(:domainId,:aliasId,
		:fromDate, :toDate, :tranType,
		:minimumDepAmt, :maximumDepAmt, :minimumWithAmt, :maximumWithAmt,
		:fromDateFirstDep, :toDateFirstDep, :fromDateFirstWith, :toDateFirstWith,
		:fromDateLastDep, :toDateLastDep, :fromDateLastWith, :toDateLastWith,
		:minimumLastDepAmt, :maximumLastDepAmt, :minimumLastWithAmt,
		:maximumLastWithAmt,
		:playerStatus ,:startIndex ,:recordTofetch,:profileStatus) }
	</sql-query>
	<sql-query name="MisPlayerReport" >
		{call MisPlayerReport(:domainId ,:aliasId,:fromDate,
		:toDate,:fromDateFirstDepPR,:toDateFirstDepPR,
		:fromDateLastDepPR,:toDateLastDepPR,:minTotalDepAmtPR,:maxTotalDepAmtPR,:fromDateLastWithPR,:toDateLastWithPR,
		:minTotalWithAmtPR , :maxTotalWithAmtPR, :fromDateLastCashGamePR,:toDateLastCashGamePR,:minCashBalPR,:maxCashBalPR
		,:minBonusBalPR,:maxBonusBalPR,:minPromoBalPR,:maxPromoBalPR,:minNoCashGamePR,:maxNoCashGamePR,
		:minNoFreeGamePR,:maxNoFreeGamePR,:minNoTourPlayedPR, :maxNoTourPlayedPR,:free,:deposit,:playerStatusPR,:direct,:campaign,:refer,:zapak,:emailVerif ,:startIndex ,:recordTofetch,:profileStatusPR) }
	</sql-query>
	<sql-query name="MisPlayerBalance" >
		{call MisPlayerBalance(:domainId,:aliasId ,:fromDate, :toDate, :playerStatusPB, :minTotDepAmt,
		  :maxTotDepAmt, :minTotBonus, :maxTotBonus, :minTotWin,
		 :maxTotWin, :minTotWgr, :maxTotWgr, :minAccBal,
		 :maxAccBal, :minTourWin, :maxTourWin, :free, :deposit  ,:startIndex ,:recordTofetch ,:profileStatusPB) }
	</sql-query>
	<sql-query name="MisWagerAndWinning" >
		{call MisWagerAndWinning(:domainId,:aliasId, :fromDate, :toDate, :plrActive,
		:plrMini, :plrFull, :plrInactive, :free,
		:deposit, :freeGame, :cashGame, :minWagAmount,
		:maxWagAmount, :minWinAmt, :maxWinAmt, :vipLevel, :lastWgrFromDate, :lastWgrToDate, :pc, :mobile, :tab,:firstDepFromDate,:firstDepToDate,:isOla,:startIndex ,:recordTofetch)
		}
	</sql-query>
	<sql-query name="MisPlayerBonus" >
		{call MisPlayerBonus(:domainId, :aliasId,:fromDate, :toDate, :playerStatusBO, :minPlrBonus,
		  :maxPlrBonus, :minReleaseBonus, :maxReleaseBonus, :minPendingBonus, :maxPendingBonus, :minNoBonus,
		   :maxNoBonus, :bonusExDateFrom, :bonusExDateTo ,:startIndex ,:recordTofetch ,:profileStatusBO) }
	</sql-query>
	<sql-query name="MisMixReport">
		{call MisMixReport(:domainId, :fromDate, :toDate, :playerStatusMX, :free,
		  :deposit, :dobVerified, :emailVerified, :moblVerified, :firstDepFromDate, :firstDepToDate,
		   :lastDepFromDate, :lastDepToDate, :minFreeGame, :maxFreeGame, :minCashGame, :maxCashGame, 
		   :minTotDepAmount, :maxTotDepAmount,:startIndex ,:recordTofetch) }
	</sql-query>
	<sql-query name="MisBusinessSummary" >
		{call
		MisBusinessSummary(:domainId,:aliasId, :fromDate, :toDate,:startIndex ,:recordTofetch) }
	</sql-query>
	<sql-query name="MisAcquiPlrData" callable="true">
		{call
		MisAcquiPlrData(:domainId, :searchDate, :plrAcquiStatus ,:startIndex ,:recordTofetch ,:aliasId) }
	</sql-query>
	<sql-query name="MisPlayerBalanceDayWise">
		{call MisPlayerBalanceDayWise(:domainId, :aliasId,:fromDate, :toDate,:txnDate, :playerStatusPBD, :minAccBal,
		 :maxAccBal,:fromDateLastLogin,:toDateLastLogin ,:free, :deposit,:startIndex ,:recordTofetch ,:profileStatusPBD) }
	</sql-query>
	<sql-query name="MisDailyPlayReport" >
		{call MisDailyPlayReport(:domainId,:aliasId, :fromDate,:toDate,:free, :deposit, :playerStatusDPR,:startIndex ,:recordTofetch ,:profileStatusDPR) }
	</sql-query>
	<sql-query name="MisPlrLoginReport" >
		{call MisPlrLoginReport(:domainId,:aliasId, :fromDate,:toDate, :playerStatusPL, :free, :deposit, :emailVerify,
		:mobileVerify, :dobVerify, :direct , :campaign, :refer, :zapak, :ola, :devicePC, :deviceMobile,:startIndex ,:recordTofetch ,:profileStatusPL) }
	</sql-query>
	<sql-query name="MisPlrLoginData" callable="true">
		{call MisPlrLoginData(:domainId, :fromDate,:toDate, :playerId, :devicePC, :deviceMobile,:startIndex ,:recordTofetch) }
	</sql-query>
	<sql-query name="getPlrRegistrationWithStatus" callable="true">
		{call getPlrRegistrationWithStatus() }
	</sql-query>
	<sql-query name="getTotalRegDayWise" >
		{call getTotalRegDayWise(:domainId, :reportCurrency ) }
	</sql-query>
	<sql-query name="getTotalDepAmtDayWise" >
		{call getTotalDepAmtDayWise(:domainId, :reportCurrency ) }
	</sql-query>
	<sql-query name="getRummyWagerWithStatus" callable="true">
		{call getRummyWagerWithStatus() }
	</sql-query>
	<sql-query name="getTotalRummyWagerDayWise" >
		{call getTotalRummyWagerDayWise(:domainId, :reportCurrency ) }
	</sql-query>
	<sql-query name="getTotalPokerWagerDayWise" >
		{call getTotalPokerWagerDayWise(:domainId, :reportCurrency ) }
	</sql-query>
	<sql-query name="getTotalWithDrawDayWise" >
		{call getTotalWithDrawDayWise(:domainId, :reportCurrency ) }
	</sql-query>
	<sql-query name="getTotalDepRequestStatus" >
		{call getTotalDepRequestStatus(:domainId, :reportCurrency ) }
	</sql-query>
	<sql-query name="getTotalBonusDayWise" >
		{call getTotalBonusDayWise(:domainId, :reportCurrency ) }
	</sql-query>
	<sql-query name="getTotalNgrDayWise" >
		{call getTotalNgrDayWise(:domainId, :reportCurrency ) }
	</sql-query>
	<sql-query name="getWagerAndWinningGameWise" >
		{call getWagerAndWinningGameWise(:domainId, :reportCurrency, :gameType ) }
	</sql-query>
	<sql-query name="getSLEWagerAndWinning" >
		{call getSLEWagerAndWinning(:domainId, :reportCurrency) }
	</sql-query>
	<sql-query name="getSLEWagerDayWise" >
		{call getSLEWagerDayWise(:domainId, :reportCurrency) }
	</sql-query>
	<sql-query name="getSGEWagerAndWinning" >
		{call getSGEWagerAndWinning(:domainId, :reportCurrency) }
	</sql-query>
	<sql-query name="getSGEWagerDayWise" >
		{call getSGEWagerDayWise(:domainId, :reportCurrency) }
	</sql-query>
	<sql-query name="getDGEWagerAndWinning" >
		{call getDGEWagerAndWinning(:domainId, :reportCurrency) }
	</sql-query>
	<sql-query name="getDGEWagerDayWise" >
		{call getDGEWagerDayWise(:domainId, :reportCurrency) }
	</sql-query>
	<sql-query name="getRUMMYWagerAndWinning" >
		{call getRUMMYWagerAndWinning(:domainId, :reportCurrency) }
	</sql-query>
	<sql-query name="getRUMMYWagerDayWise" >
		{call getRUMMYWagerDayWise(:domainId, :reportCurrency) }
	</sql-query>
	<sql-query name="getPOKERWagerAndWinning" >
		{call getPOKERWagerAndWinning(:domainId, :reportCurrency) }
	</sql-query>
	<sql-query name="getPOKERWagerDayWise" >
		{call getPOKERWagerDayWise(:domainId, :reportCurrency) }
	</sql-query>
	<sql-query name="getSBSWagerAndWinning" >
		{call getSBSWagerAndWinning(:domainId, :reportCurrency) }
	</sql-query>
	<sql-query name="getSBSWagerDayWise" >
		{call getSBSWagerDayWise(:domainId, :reportCurrency) }
	</sql-query>
	<sql-query name="getIGEWagerAndWinning" >
		{call getIGEWagerAndWinning(:domainId, :reportCurrency) }
	</sql-query>
	<sql-query name="getIGEWagerDayWise" >
		{call getIGEWagerDayWise(:domainId, :reportCurrency) }
	</sql-query>
	<sql-query name="getRummyWagerDayWise" >
		{call getRummyWagerDayWise(:domainId, :reportCurrency ) }
	</sql-query>
	<sql-query name="getRummyWagerHourWise"  >
		{call getRummyWagerHourWise(:domainId, :reportCurrency ) }
	</sql-query>
	<sql-query name="getGrossGamingRevenueDayWise" callable="true">
		{call getGrossGamingRevenueDayWise() }
	</sql-query>
	<sql-query name="getGrossGamingRevenueMonthly" callable="true">
		{call getGrossGamingRevenueMonthly() }
	</sql-query>
	<sql-query name="getTotalGameWagerDayWise" callable="true">
		{call getTotalGameWagerDayWise() }
	</sql-query>
	<sql-query name="playerPayCorrectionReport">
		{call
		playerPayCorrectionReport(:domainId,:aliasId, :fromDate, :toDate,
		:userName, :reportCurrency ,:startIndex ,:recordTofetch) }
	</sql-query>
	<sql-query name="zapakPlayerReport" >
		{call
		zapakPlayerReport(:domainId, :fromDate, :toDate ) }
	</sql-query>
	<sql-query name="zapakPlayerDepositReport" >
		{call
		zapakPlayerDepositReport(:domainId, :fromDate, :toDate ) }
	</sql-query>
	<sql-query name="getWinner">
		{call getWinner(:domainId, :fromDate, :toDate, :listHeader,:gameType,:subGameType ) }
	    <return-scalar column="userName" type="java.lang.String"/>
		<return-scalar column="state" type="java.lang.String"/>
		<return-scalar column="winningChips" type="java.lang.Double"/>
		<return-scalar column="listHeader" type="java.lang.String"/>
	</sql-query>
	
	<sql-query name="indiaBetPlayerReport">
		{call indiaBetPlayerReport(:domainId,:aliasId,
		:fromDate, :toDate) }
	</sql-query>
	<sql-query name="indiaBetPlayerWagerReport">
		{call indiaBetPlayerWagerReport(:domainId,
		:fromDate, :toDate) }
	</sql-query>
	<sql-query name="CampRevenueReport">
		{call
		CampRevenueReport(:domainId,:aliasId, :camType,:startIndex ,:recordTofetch) }
	</sql-query>
	<sql-query name="campRevReferFrndReport">
		{call
		campRevReferFrndReport(:domainId,:aliasId, :camType,:startIndex ,:recordTofetch) }
	</sql-query>
	<sql-query name="CampWiseRevenuReport">
		{call
		CampWiseRevenuReport(:domainId,:aliasId,:camType, :camName, :subCamName ,:startIndex ,:recordTofetch) }
	</sql-query>
	<sql-query name="StateWiseReport">
		{call
		StateWiseReport(:domainId,:aliasId,:fromDate, :toDate, :whatToGet ,:startIndex ,:recordTofetch) }
	</sql-query>
	<sql-query name="MisPartialPlayerReport">
		{call MisPartialPlayerReport(:domainId,:aliasId,
		:fromDate, :toDate,:startIndex ,:recordTofetch) }
	</sql-query>
	<sql-query name="mobileAppDownloadDetail">
		{call mobileAppDownloadDetail(:domainId,
		:fromDate, :toDate, :reportType,:startIndex ,:recordTofetch) }
	</sql-query>
	<sql-query name="stCmsCampAppDownReport">
		{call stCmsCampAppDownReport(:domainId, :campId, :subCampId, 
		:fromDate, :toDate, :campType,:startIndex ,:recordTofetch) }
	</sql-query>
	<sql-query name="stCshSubwalletRecTracking">
		{call stCshSubwalletRecTracking(:subWalletIds) }
	</sql-query>
	<sql-query name="stCmsCampPlayerWiseDepReport">
		{call stCmsCampPlayerWiseDepReport(:domainId, :playerId) }
	</sql-query>
	<sql-query name="campRevReferFrndPlrReport">
		{call campRevReferFrndPlrReport(:domainId,:aliasId, :camType,:startIndex ,:recordTofetch) }
	</sql-query>
	
	<sql-query name="PlayerRegIpCountReport" >
		{call PlayerRegIpCountReport(:domainId, :aliasId,:fromDate, :toDate,:startIndex ,:recordTofetch) }
	</sql-query>
	<sql-query name="LocationWiseWagerAndWinning" >
		{call LocationWiseWagerAndWinning(:domainId,:aliasId, :fromDate, :toDate, :procNameLocationWiseWagerAndWinning)  }
	</sql-query>
	<sql-query name="plrWiseWagerWinningFromTablet" >
		{call plrWiseWagerWinningFromTablet(:domainId,:aliasId, :fromDate, :toDate, :procNameplrWiseWagerWinningFromTablet)  }
	</sql-query>
	<sql-query name="deviceWiseWagerAndWinning" >
		{call deviceWiseWagerAndWinning(:domainId,:aliasId, :fromDate, :toDate, :locationId)  }
	</sql-query>
	<sql-query name="getTotalNgrIgeDayWise" >
		{call getTotalNgrIgeDayWise(:domainId,:reportCurrency)  }
	</sql-query>
	<sql-query name="getTotalNgrSlotDayWise" >
		{call getTotalNgrSlotDayWise(:domainId,:reportCurrency)  }
	</sql-query>
	<sql-query name="configDatabase">
		{call configDatabase(:domainName,
		:portalContDmName, :cshDmName, :sendmail, :sendSms, :rummyIplive,
		:rummyIpCur, :mSiteName, :commonContDmName,
		:pcSiteName, :aliasName, :publicURL, :privateURL,:contentType,
		:plrContentURL,:landingPageURL,:emailTempURL) }
	</sql-query>
	<sql-query name="fetchDBConfiguration">
		{call fetchDBConfiguration()}
	</sql-query>
	<sql-query name="AliasWiseWagerAndWinning">
		{call AliasWiseWagerAndWinning(:domainId,:aliasId,:fromDate,:toDate,:gameType, :dateWise, :playerWise,:startIndex,:recordTofetch)}
	</sql-query>
	<sql-query name="MgmtReport">
		{call MgmtReport(:domainId,:aliasId,:fromDate,:toDate,:startIndex,:recordTofetch)}
	</sql-query>
	
	<sql-query name="TicketDetails">
		{call TicketDetails(:domainId,:aliasId,:fromDate,:toDate,:playerId, :startIndex,:recordTofetch)}
	</sql-query>

	<sql-query name="LatestLoyaltyHistory">
		{call LatestLoyaltyHistory(:fromDate,:toDate)}
	</sql-query>
	 <sql-query name="thirdPartyTxn">
		{call thirdPartyTxn(:playerId,:fromLastTrans,:toLastTrans,:limit,:offset) }
	</sql-query>
	<sql-query name="dailyRakeAndRoyaltyForAlias" >
		{call dailyRakeAndRoyaltyForAlias(:domainId,:aliasId, :fromDate, :toDate,:startIndex ,:recordTofetch) }
	</sql-query>
	<sql-query name="getTotalRummyRakeDayWise" >
		{call getTotalRummyRakeDayWise(:domainId,:reportCurrency)}
	</sql-query>
   	<sql-query name="misPlayerSummaryReport" >
		{call misPlayerSummaryReport(:domainId,:aliasId, :fromDate, :toDate,:startIndex ,:recordTofetch) }
	</sql-query>	
	<sql-query name="TDSReport" >
		{call TDSReport(:domainId,:aliasId, :fromDate, :toDate,:startIndex ,:recordTofetch) }
	</sql-query>
	<sql-query name="SaleAndCommissionDueReport">
		{call SaleAndCommissionDueReport(:domainId,:fromDate,:toDate,:reportCurrency,:startIndex,:recordTofetch) }
	</sql-query>
	<sql-query name="StateWiseRakeForAlias">
		{call StateWiseRakeForAlias(:domainId,:aliasId,:fromDate,:toDate) }
	</sql-query>
<sql-query name="itPlayerWise" >
		{call itPlayerWise(:domainId,:aliasId, :fromDate, :toDate,:startIndex ,:recordTofetch,:taxreportwise,:taxstatewise) }
	</sql-query>
	<sql-query name="AdCompany" >
		{call AdCompany(:domainId,:aliasId,:affiliateName,:offerId ,:fromDate, :toDate,:startIndex ,:recordTofetch) }
	</sql-query>
	<sql-query name="getLastDaySummaryData" >
		{call getLastDaySummaryData() }
	</sql-query>
	<sql-query name="StCommFetchPlayerId">
		{call StCommFetchPlayerId(:domainId, :aliasId, :channelType ,:eventType,
		:startIndex, :recordToFetch) }
	</sql-query>
</hibernate-mapping>
